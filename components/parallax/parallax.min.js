/**
 * @module       parallax
 * @version      0.1.0
 * @author       OXAYAZA {@link https://oxayaza.page.link/github}
 * @license      CC BY-SA 4.0 {@link https://creativecommons.org/licenses/by-sa/4.0/}
 * @see          {@link https://codepen.io/OXAYAZA/pen/RgNywY}
 * @see          {@link https://github.com/OXAYAZA/parallax}
 * @see          {@link https://oxayaza.page.link/linkedin}
 * @description  Simple, flexible and responsive parallax.
 */
function _typeof(obj){"@babel/helpers - typeof";if(typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"){_typeof=function _typeof(obj){return typeof obj}}else{_typeof=function _typeof(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj}}return _typeof(obj)}(function(){function parseJSON(str){try{if(str)return JSON.parse(str);else return{}}catch(error){console.warn(error);return{}}}function merge(source,merged){for(var key in merged){if(merged[key]instanceof Object&&merged[key].constructor.name==="Object"){if(_typeof(source[key])!=="object")source[key]={};source[key]=merge(source[key],merged[key])}else{source[key]=merged[key]}}return source}function Parallax(params){var _this=this;if(!params.node||!(params.node instanceof Element)){throw new Error("Parallax node must be an Element")}merge(this,{layerSelector:".parallax-layer",layerParams:"data-parallax-layer"});merge(this,params);if(typeof this.layerSelector==="string"){this.layers=this.node.querySelectorAll(this.layerSelector);this.layers.forEach(function(node){new ParallaxLayer(merge(parseJSON(node.getAttribute(_this.layerParams)),{node:node,owner:_this}))})}this.node.parallax=this}function ParallaxLayer(params){var _this2=this;if(!params.node||!(params.node instanceof Element)){throw new Error("Layer node must be an instance of Element")}if(!params.owner||!(params.owner instanceof Parallax)){throw new Error("Layer owner must be an instance of Parallax")}merge(this,{coeff:0.1,onReady:null,autosize:true,heightHandler:function heightHandler(node,height){node.style.height=height+"px"},offsetHandler:function offsetHandler(node,offset){node.style.top=_this2.rect.height/2-_this2.height/2+offset+"px"}});merge(this,params);this.wh=window.innerHeight;this.rect=this.owner.node.getBoundingClientRect();this.setHeight();this.setOffset();window.addEventListener("resize",this.resize.bind(this));document.addEventListener("scroll",this.scroll.bind(this));this.node.parallaxLayer=this;if(this.onReady instanceof Function){this.onReady.call(this)}}ParallaxLayer.prototype.setHeight=function(){if(this.autosize){if(this.coeff>=0){this.height=~~(this.rect.height+(this.wh+this.rect.height)*this.coeff)}else if(this.coeff<0&&this.coeff>=-1){this.height=~~(this.rect.height+(this.wh-this.rect.height)*Math.abs(this.coeff))}else if(this.coeff<-1){this.height=~~((this.wh+this.rect.height)*Math.abs(this.coeff)-this.rect.height)}if(this.heightHandler instanceof Function){this.heightHandler.call(this,this.node,this.height)}}};ParallaxLayer.prototype.setOffset=function(){this.dy=~~((this.rect.top-this.wh/2+this.rect.height/2)*this.coeff);if(this.offsetHandler instanceof Function){this.offsetHandler.call(this,this.node,this.dy)}};ParallaxLayer.prototype.resize=function(){this.wh=window.innerHeight;this.rect=this.owner.node.getBoundingClientRect();this.setOffset();this.setHeight()};ParallaxLayer.prototype.scroll=function(){this.rect=this.owner.node.getBoundingClientRect();if(this.rect.top<this.wh&&this.rect.bottom>0){this.setOffset()}};if(!window.Parallax){window.Parallax=Parallax}else{throw new Error("Parallax is already defined or occupied")}if(!window.ParallaxLayer){window.ParallaxLayer=ParallaxLayer}else{throw new Error("ParallaxLayer is already defined or occupied")}})();