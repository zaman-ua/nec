<?php
/**
 * @author Volodymyr Zheliba
 */


class SmartyParser {
    
    private $_num_const_regexp='(?:\-?\d+(?:\.\d+)?)';
    private $_obj_call_regexp='(?:(?:\$\w+(?:\[\$?[\w\.]+\])*(?:\.\$?\w+(?:\[\$?[\w\.]+\])*)*(?:(?:[\+\*\/\%]|(?:-(?!>)))(?:(?:\-?\d+(?:\.\d+)?)|[\$\w\.\+\-\*\/\%\d\>\[\]])*)?(?:\->(?:\$?\w+(?:\[\$?[\w\.]+\])*(?:\.\$?\w+(?:\[\$?[\w\.]+\])*)*(?:(?:[\+\*\/\%]|(?:-(?!>)))(?:(?:\-?\d+(?:\.\d+)?)|[\$\w\.\+\-\*\/\%\d\>\[\]])*)?))+)(?:\((?:(?:\w+|(?:(?:(?:(?:\$\w+(?:\[\$?[\w\.]+\])*(?:\.\$?\w+(?:\[\$?[\w\.]+\])*)*(?:(?:[\+\*\/\%]|(?:-(?!>)))(?:(?:\-?\d+(?:\.\d+)?)|[\$\w\.\+\-\*\/\%\d\>\[\]])*)?|\#\w+\#|\%\w+\.\w+\%)|(?:"[^"\\\]*(?:\\\.[^"\\\]*)*"|"[^"\\\]*(?:\\\.[^"\\\]*)*"))|(?:\-?\d+(?:\.\d+)?))(?:\->(?:\$?\w+(?:\[\$?[\w\.]+\])*(?:\.\$?\w+(?:\[\$?[\w\.]+\])*)*(?:(?:[\+\*\/\%]|(?:-(?!>)))(?:(?:\-?\d+(?:\.\d+)?)|[\$\w\.\+\-\*\/\%\d\>\[\]])*)?)(?:\((?:(?:(?:(?:\$\w+(?:\[\$?[\w\.]+\])*(?:\.\$?\w+(?:\[\$?[\w\.]+\])*)*(?:(?:[\+\*\/\%]|(?:-(?!>)))(?:(?:\-?\d+(?:\.\d+)?)|[\$\w\.\+\-\*\/\%\d\>\[\]])*)?|\#\w+\#|\%\w+\.\w+\%)|(?:"[^"\\\]*(?:\\\.[^"\\\]*)*"|"[^"\\\]*(?:\\\.[^"\\\]*)*"))|(?:\-?\d+(?:\.\d+)?))(?:\s*,\s*(?:(?:(?:\$\w+(?:\[\$?[\w\.]+\])*(?:\.\$?\w+(?:\[\$?[\w\.]+\])*)*(?:(?:[\+\*\/\%]|(?:-(?!>)))(?:(?:\-?\d+(?:\.\d+)?)|[\$\w\.\+\-\*\/\%\d\>\[\]])*)?|\#\w+\#|\%\w+\.\w+\%)|(?:"[^"\\\]*(?:\\\.[^"\\\]*)*"|"[^"\\\]*(?:\\\.[^"\\\]*)*"))|(?:\-?\d+(?:\.\d+)?)))*)?\))?)*)(?:\s*,\s*(?:(?:\w+|(?:(?:\$\w+(?:\[\$?[\w\.]+\])*(?:\.\$?\w+(?:\[\$?[\w\.]+\])*)*(?:(?:[\+\*\/\%]|(?:-(?!>)))(?:(?:\-?\d+(?:\.\d+)?)|[\$\w\.\+\-\*\/\%\d\>\[\]])*)?|\#\w+\#|\%\w+\.\w+\%)|(?:"[^"\\\]*(?:\\\.[^"\\\]*)*"|"[^"\\\]*(?:\\\.[^"\\\]*)*"))(?:(?:(?:(?:\$\w+(?:\[\$?[\w\.]+\])*(?:\.\$?\w+(?:\[\$?[\w\.]+\])*)*(?:(?:[\+\*\/\%]|(?:-(?!>)))(?:(?:\-?\d+(?:\.\d+)?)|[\$\w\.\+\-\*\/\%\d\>\[\]])*)?|\#\w+\#|\%\w+\.\w+\%)|(?:"[^"\\\]*(?:\\\.[^"\\\]*)*"|"[^"\\\]*(?:\\\.[^"\\\]*)*"))|(?:\-?\d+(?:\.\d+)?))(?:\->(?:\$?\w+(?:\[\$?[\w\.]+\])*(?:\.\$?\w+(?:\[\$?[\w\.]+\])*)*(?:(?:[\+\*\/\%]|(?:-(?!>)))(?:(?:\-?\d+(?:\.\d+)?)|[\$\w\.\+\-\*\/\%\d\>\[\]])*)?)(?:\((?:(?:(?:(?:\$\w+(?:\[\$?[\w\.]+\])*(?:\.\$?\w+(?:\[\$?[\w\.]+\])*)*(?:(?:[\+\*\/\%]|(?:-(?!>)))(?:(?:\-?\d+(?:\.\d+)?)|[\$\w\.\+\-\*\/\%\d\>\[\]])*)?|\#\w+\#|\%\w+\.\w+\%)|(?:"[^"\\\]*(?:\\\.[^"\\\]*)*"|"[^"\\\]*(?:\\\.[^"\\\]*)*"))|(?:\-?\d+(?:\.\d+)?))(?:\s*,\s*(?:(?:(?:\$\w+(?:\[\$?[\w\.]+\])*(?:\.\$?\w+(?:\[\$?[\w\.]+\])*)*(?:(?:[\+\*\/\%]|(?:-(?!>)))(?:(?:\-?\d+(?:\.\d+)?)|[\$\w\.\+\-\*\/\%\d\>\[\]])*)?|\#\w+\#|\%\w+\.\w+\%)|(?:"[^"\\\]*(?:\\\.[^"\\\]*)*"|"[^"\\\]*(?:\\\.[^"\\\]*)*"))|(?:\-?\d+(?:\.\d+)?)))*)?\))?)*))))*)(?:\s*,\s*(?:\w+|(?:(?:(?:(?:\$\w+(?:\[\$?[\w\.]+\])*(?:\.\$?\w+(?:\[\$?[\w\.]+\])*)*(?:(?:[\+\*\/\%]|(?:-(?!>)))(?:(?:\-?\d+(?:\.\d+)?)|[\$\w\.\+\-\*\/\%\d\>\[\]])*)?|\#\w+\#|\%\w+\.\w+\%)|(?:"[^"\\\]*(?:\\\.[^"\\\]*)*"|"[^"\\\]*(?:\\\.[^"\\\]*)*"))|(?:\-?\d+(?:\.\d+)?))(?:\->(?:\$?\w+(?:\[\$?[\w\.]+\])*(?:\.\$?\w+(?:\[\$?[\w\.]+\])*)*(?:(?:[\+\*\/\%]|(?:-(?!>)))(?:(?:\-?\d+(?:\.\d+)?)|[\$\w\.\+\-\*\/\%\d\>\[\]])*)?)(?:\((?:(?:(?:(?:\$\w+(?:\[\$?[\w\.]+\])*(?:\.\$?\w+(?:\[\$?[\w\.]+\])*)*(?:(?:[\+\*\/\%]|(?:-(?!>)))(?:(?:\-?\d+(?:\.\d+)?)|[\$\w\.\+\-\*\/\%\d\>\[\]])*)?|\#\w+\#|\%\w+\.\w+\%)|(?:"[^"\\\]*(?:\\\.[^"\\\]*)*"|"[^"\\\]*(?:\\\.[^"\\\]*)*"))|(?:\-?\d+(?:\.\d+)?))(?:\s*,\s*(?:(?:(?:\$\w+(?:\[\$?[\w\.]+\])*(?:\.\$?\w+(?:\[\$?[\w\.]+\])*)*(?:(?:[\+\*\/\%]|(?:-(?!>)))(?:(?:\-?\d+(?:\.\d+)?)|[\$\w\.\+\-\*\/\%\d\>\[\]])*)?|\#\w+\#|\%\w+\.\w+\%)|(?:"[^"\\\]*(?:\\\.[^"\\\]*)*"|"[^"\\\]*(?:\\\.[^"\\\]*)*"))|(?:\-?\d+(?:\.\d+)?)))*)?\))?)*)(?:\s*,\s*(?:(?:\w+|(?:(?:\$\w+(?:\[\$?[\w\.]+\])*(?:\.\$?\w+(?:\[\$?[\w\.]+\])*)*(?:(?:[\+\*\/\%]|(?:-(?!>)))(?:(?:\-?\d+(?:\.\d+)?)|[\$\w\.\+\-\*\/\%\d\>\[\]])*)?|\#\w+\#|\%\w+\.\w+\%)|(?:"[^"\\\]*(?:\\\.[^"\\\]*)*"|"[^"\\\]*(?:\\\.[^"\\\]*)*"))(?:(?:(?:(?:\$\w+(?:\[\$?[\w\.]+\])*(?:\.\$?\w+(?:\[\$?[\w\.]+\])*)*(?:(?:[\+\*\/\%]|(?:-(?!>)))(?:(?:\-?\d+(?:\.\d+)?)|[\$\w\.\+\-\*\/\%\d\>\[\]])*)?|\#\w+\#|\%\w+\.\w+\%)|(?:"[^"\\\]*(?:\\\.[^"\\\]*)*"|"[^"\\\]*(?:\\\.[^"\\\]*)*"))|(?:\-?\d+(?:\.\d+)?))(?:\->(?:\$?\w+(?:\[\$?[\w\.]+\])*(?:\.\$?\w+(?:\[\$?[\w\.]+\])*)*(?:(?:[\+\*\/\%]|(?:-(?!>)))(?:(?:\-?\d+(?:\.\d+)?)|[\$\w\.\+\-\*\/\%\d\>\[\]])*)?)(?:\((?:(?:(?:(?:\$\w+(?:\[\$?[\w\.]+\])*(?:\.\$?\w+(?:\[\$?[\w\.]+\])*)*(?:(?:[\+\*\/\%]|(?:-(?!>)))(?:(?:\-?\d+(?:\.\d+)?)|[\$\w\.\+\-\*\/\%\d\>\[\]])*)?|\#\w+\#|\%\w+\.\w+\%)|(?:"[^"\\\]*(?:\\\.[^"\\\]*)*"|"[^"\\\]*(?:\\\.[^"\\\]*)*"))|(?:\-?\d+(?:\.\d+)?))(?:\s*,\s*(?:(?:(?:\$\w+(?:\[\$?[\w\.]+\])*(?:\.\$?\w+(?:\[\$?[\w\.]+\])*)*(?:(?:[\+\*\/\%]|(?:-(?!>)))(?:(?:\-?\d+(?:\.\d+)?)|[\$\w\.\+\-\*\/\%\d\>\[\]])*)?|\#\w+\#|\%\w+\.\w+\%)|(?:"[^"\\\]*(?:\\\.[^"\\\]*)*"|"[^"\\\]*(?:\\\.[^"\\\]*)*"))|(?:\-?\d+(?:\.\d+)?)))*)?\))?)*))))*))*)?\))?(?:(?:[\+\*\/\%]|(?:-(?!>)))(?:(?:\-?\d+(?:\.\d+)?)|[\$\w\.\+\-\*\/\%\d\>\[\]])*)?)';
    private $_var_regexp='(?:(?:\$\w+(?:\[\$?[\w\.]+\])*(?:\.\$?\w+(?:\[\$?[\w\.]+\])*)*(?:(?:[\+\*\/\%]|(?:-(?!>)))(?:(?:\-?\d+(?:\.\d+)?)|[\$\w\.\+\-\*\/\%\d\>\[\]])*)?|\#\w+\#|\%\w+\.\w+\%)|(?:"[^"\\\]*(?:\\\.[^"\\\]*)*"|"[^"\\\]*(?:\\\.[^"\\\]*)*"))';

    private $_reg_obj_regexp='[a-zA-Z_]\w*->[a-zA-Z_]\w*';
    private $_func_regexp='[a-zA-Z_]\w*';
    private $_mod_regexp='(?:\|@?\w+(?::(?:\w+|(?:\-?\d+(?:\.\d+)?)|(?:(?:\$\w+(?:\[\$?[\w\.]+\])*(?:\.\$?\w+(?:\[\$?[\w\.]+\])*)*(?:(?:[\+\*\/\%]|(?:-(?!>)))(?:(?:\-?\d+(?:\.\d+)?)|[\$\w\.\+\-\*\/\%\d\>\[\]])*)?(?:\->(?:\$?\w+(?:\[\$?[\w\.]+\])*(?:\.\$?\w+(?:\[\$?[\w\.]+\])*)*(?:(?:[\+\*\/\%]|(?:-(?!>)))(?:(?:\-?\d+(?:\.\d+)?)|[\$\w\.\+\-\*\/\%\d\>\[\]])*)?))+)(?:\((?:(?:\w+|(?:(?:(?:(?:\$\w+(?:\[\$?[\w\.]+\])*(?:\.\$?\w+(?:\[\$?[\w\.]+\])*)*(?:(?:[\+\*\/\%]|(?:-(?!>)))(?:(?:\-?\d+(?:\.\d+)?)|[\$\w\.\+\-\*\/\%\d\>\[\]])*)?|\#\w+\#|\%\w+\.\w+\%)|(?:"[^"\\\]*(?:\\\.[^"\\\]*)*"|"[^"\\\]*(?:\\\.[^"\\\]*)*"))|(?:\-?\d+(?:\.\d+)?))(?:\->(?:\$?\w+(?:\[\$?[\w\.]+\])*(?:\.\$?\w+(?:\[\$?[\w\.]+\])*)*(?:(?:[\+\*\/\%]|(?:-(?!>)))(?:(?:\-?\d+(?:\.\d+)?)|[\$\w\.\+\-\*\/\%\d\>\[\]])*)?)(?:\((?:(?:(?:(?:\$\w+(?:\[\$?[\w\.]+\])*(?:\.\$?\w+(?:\[\$?[\w\.]+\])*)*(?:(?:[\+\*\/\%]|(?:-(?!>)))(?:(?:\-?\d+(?:\.\d+)?)|[\$\w\.\+\-\*\/\%\d\>\[\]])*)?|\#\w+\#|\%\w+\.\w+\%)|(?:"[^"\\\]*(?:\\\.[^"\\\]*)*"|"[^"\\\]*(?:\\\.[^"\\\]*)*"))|(?:\-?\d+(?:\.\d+)?))(?:\s*,\s*(?:(?:(?:\$\w+(?:\[\$?[\w\.]+\])*(?:\.\$?\w+(?:\[\$?[\w\.]+\])*)*(?:(?:[\+\*\/\%]|(?:-(?!>)))(?:(?:\-?\d+(?:\.\d+)?)|[\$\w\.\+\-\*\/\%\d\>\[\]])*)?|\#\w+\#|\%\w+\.\w+\%)|(?:"[^"\\\]*(?:\\\.[^"\\\]*)*"|"[^"\\\]*(?:\\\.[^"\\\]*)*"))|(?:\-?\d+(?:\.\d+)?)))*)?\))?)*)(?:\s*,\s*(?:(?:\w+|(?:(?:\$\w+(?:\[\$?[\w\.]+\])*(?:\.\$?\w+(?:\[\$?[\w\.]+\])*)*(?:(?:[\+\*\/\%]|(?:-(?!>)))(?:(?:\-?\d+(?:\.\d+)?)|[\$\w\.\+\-\*\/\%\d\>\[\]])*)?|\#\w+\#|\%\w+\.\w+\%)|(?:"[^"\\\]*(?:\\\.[^"\\\]*)*"|"[^"\\\]*(?:\\\.[^"\\\]*)*"))(?:(?:(?:(?:\$\w+(?:\[\$?[\w\.]+\])*(?:\.\$?\w+(?:\[\$?[\w\.]+\])*)*(?:(?:[\+\*\/\%]|(?:-(?!>)))(?:(?:\-?\d+(?:\.\d+)?)|[\$\w\.\+\-\*\/\%\d\>\[\]])*)?|\#\w+\#|\%\w+\.\w+\%)|(?:"[^"\\\]*(?:\\\.[^"\\\]*)*"|"[^"\\\]*(?:\\\.[^"\\\]*)*"))|(?:\-?\d+(?:\.\d+)?))(?:\->(?:\$?\w+(?:\[\$?[\w\.]+\])*(?:\.\$?\w+(?:\[\$?[\w\.]+\])*)*(?:(?:[\+\*\/\%]|(?:-(?!>)))(?:(?:\-?\d+(?:\.\d+)?)|[\$\w\.\+\-\*\/\%\d\>\[\]])*)?)(?:\((?:(?:(?:(?:\$\w+(?:\[\$?[\w\.]+\])*(?:\.\$?\w+(?:\[\$?[\w\.]+\])*)*(?:(?:[\+\*\/\%]|(?:-(?!>)))(?:(?:\-?\d+(?:\.\d+)?)|[\$\w\.\+\-\*\/\%\d\>\[\]])*)?|\#\w+\#|\%\w+\.\w+\%)|(?:"[^"\\\]*(?:\\\.[^"\\\]*)*"|"[^"\\\]*(?:\\\.[^"\\\]*)*"))|(?:\-?\d+(?:\.\d+)?))(?:\s*,\s*(?:(?:(?:\$\w+(?:\[\$?[\w\.]+\])*(?:\.\$?\w+(?:\[\$?[\w\.]+\])*)*(?:(?:[\+\*\/\%]|(?:-(?!>)))(?:(?:\-?\d+(?:\.\d+)?)|[\$\w\.\+\-\*\/\%\d\>\[\]])*)?|\#\w+\#|\%\w+\.\w+\%)|(?:"[^"\\\]*(?:\\\.[^"\\\]*)*"|"[^"\\\]*(?:\\\.[^"\\\]*)*"))|(?:\-?\d+(?:\.\d+)?)))*)?\))?)*))))*)(?:\s*,\s*(?:\w+|(?:(?:(?:(?:\$\w+(?:\[\$?[\w\.]+\])*(?:\.\$?\w+(?:\[\$?[\w\.]+\])*)*(?:(?:[\+\*\/\%]|(?:-(?!>)))(?:(?:\-?\d+(?:\.\d+)?)|[\$\w\.\+\-\*\/\%\d\>\[\]])*)?|\#\w+\#|\%\w+\.\w+\%)|(?:"[^"\\\]*(?:\\\.[^"\\\]*)*"|"[^"\\\]*(?:\\\.[^"\\\]*)*"))|(?:\-?\d+(?:\.\d+)?))(?:\->(?:\$?\w+(?:\[\$?[\w\.]+\])*(?:\.\$?\w+(?:\[\$?[\w\.]+\])*)*(?:(?:[\+\*\/\%]|(?:-(?!>)))(?:(?:\-?\d+(?:\.\d+)?)|[\$\w\.\+\-\*\/\%\d\>\[\]])*)?)(?:\((?:(?:(?:(?:\$\w+(?:\[\$?[\w\.]+\])*(?:\.\$?\w+(?:\[\$?[\w\.]+\])*)*(?:(?:[\+\*\/\%]|(?:-(?!>)))(?:(?:\-?\d+(?:\.\d+)?)|[\$\w\.\+\-\*\/\%\d\>\[\]])*)?|\#\w+\#|\%\w+\.\w+\%)|(?:"[^"\\\]*(?:\\\.[^"\\\]*)*"|"[^"\\\]*(?:\\\.[^"\\\]*)*"))|(?:\-?\d+(?:\.\d+)?))(?:\s*,\s*(?:(?:(?:\$\w+(?:\[\$?[\w\.]+\])*(?:\.\$?\w+(?:\[\$?[\w\.]+\])*)*(?:(?:[\+\*\/\%]|(?:-(?!>)))(?:(?:\-?\d+(?:\.\d+)?)|[\$\w\.\+\-\*\/\%\d\>\[\]])*)?|\#\w+\#|\%\w+\.\w+\%)|(?:"[^"\\\]*(?:\\\.[^"\\\]*)*"|"[^"\\\]*(?:\\\.[^"\\\]*)*"))|(?:\-?\d+(?:\.\d+)?)))*)?\))?)*)(?:\s*,\s*(?:(?:\w+|(?:(?:\$\w+(?:\[\$?[\w\.]+\])*(?:\.\$?\w+(?:\[\$?[\w\.]+\])*)*(?:(?:[\+\*\/\%]|(?:-(?!>)))(?:(?:\-?\d+(?:\.\d+)?)|[\$\w\.\+\-\*\/\%\d\>\[\]])*)?|\#\w+\#|\%\w+\.\w+\%)|(?:"[^"\\\]*(?:\\\.[^"\\\]*)*"|"[^"\\\]*(?:\\\.[^"\\\]*)*"))(?:(?:(?:(?:\$\w+(?:\[\$?[\w\.]+\])*(?:\.\$?\w+(?:\[\$?[\w\.]+\])*)*(?:(?:[\+\*\/\%]|(?:-(?!>)))(?:(?:\-?\d+(?:\.\d+)?)|[\$\w\.\+\-\*\/\%\d\>\[\]])*)?|\#\w+\#|\%\w+\.\w+\%)|(?:"[^"\\\]*(?:\\\.[^"\\\]*)*"|"[^"\\\]*(?:\\\.[^"\\\]*)*"))|(?:\-?\d+(?:\.\d+)?))(?:\->(?:\$?\w+(?:\[\$?[\w\.]+\])*(?:\.\$?\w+(?:\[\$?[\w\.]+\])*)*(?:(?:[\+\*\/\%]|(?:-(?!>)))(?:(?:\-?\d+(?:\.\d+)?)|[\$\w\.\+\-\*\/\%\d\>\[\]])*)?)(?:\((?:(?:(?:(?:\$\w+(?:\[\$?[\w\.]+\])*(?:\.\$?\w+(?:\[\$?[\w\.]+\])*)*(?:(?:[\+\*\/\%]|(?:-(?!>)))(?:(?:\-?\d+(?:\.\d+)?)|[\$\w\.\+\-\*\/\%\d\>\[\]])*)?|\#\w+\#|\%\w+\.\w+\%)|(?:"[^"\\\]*(?:\\\.[^"\\\]*)*"|"[^"\\\]*(?:\\\.[^"\\\]*)*"))|(?:\-?\d+(?:\.\d+)?))(?:\s*,\s*(?:(?:(?:\$\w+(?:\[\$?[\w\.]+\])*(?:\.\$?\w+(?:\[\$?[\w\.]+\])*)*(?:(?:[\+\*\/\%]|(?:-(?!>)))(?:(?:\-?\d+(?:\.\d+)?)|[\$\w\.\+\-\*\/\%\d\>\[\]])*)?|\#\w+\#|\%\w+\.\w+\%)|(?:"[^"\\\]*(?:\\\.[^"\\\]*)*"|"[^"\\\]*(?:\\\.[^"\\\]*)*"))|(?:\-?\d+(?:\.\d+)?)))*)?\))?)*))))*))*)?\))?(?:(?:[\+\*\/\%]|(?:-(?!>)))(?:(?:\-?\d+(?:\.\d+)?)|[\$\w\.\+\-\*\/\%\d\>\[\]])*)?)|(?:\$\w+(?:\[\$?[\w\.]+\])*(?:\.\$?\w+(?:\[\$?[\w\.]+\])*)*(?:(?:[\+\*\/\%]|(?:-(?!>)))(?:(?:\-?\d+(?:\.\d+)?)|[\$\w\.\+\-\*\/\%\d\>\[\]])*)?|\#\w+\#|\%\w+\.\w+\%)|(?:"[^"\\\]*(?:\\\.[^"\\\]*)*"|"[^"\\\]*(?:\\\.[^"\\\]*)*")))*)';

    private $_tag_stack=array();

    private $aComands=array('include','include_php','if','else','elseif','/if','capture','/capture','ldelim','rdelim','section','sectionelse','/section','foreach','foreachelse','/foreach','strip','/strip','php','insert');
    
    //-----------------------------------------------------------------------------------------------
    public function DoParser($sSourceContent,&$sBedCommand=''){
        
        $ldq = preg_quote("{", '~');
        $rdq = preg_quote("}", '~');
        preg_match_all("~{$ldq}\s*(.*?)\s*{$rdq}~s", $sSourceContent, $_match);
        $aTemplateTags = $_match[1];
    
    
        foreach ($aTemplateTags as $sTemplateTag){
            if (substr($sTemplateTag, 0, 1) == '*' && substr($sTemplateTag, -1) == '*')
                continue;
    
            if(! preg_match('~^(?:(' . $this->_num_const_regexp . '|' . $this->_obj_call_regexp . '|' . $this->_var_regexp
                . '|\/?' . $this->_reg_obj_regexp . '|\/?' . $this->_func_regexp . ')(' . $this->_mod_regexp . '*))
                      (?:\s+(.*))?$
                    ~xs', $sTemplateTag, $aMatch)) {
                $sBedCommand=$sTemplateTag;
                return false;
            }
    
            $sTagCommand = $aMatch[1];
            $sTagModifier = isset($aMatch[2]) ? $aMatch[2] : null;
            $sTagArgs = isset($aMatch[3]) ? $aMatch[3] : null;
    
            if (preg_match('~^' . $this->_num_const_regexp . '|' . $this->_obj_call_regexp . '|' . $this->_var_regexp . '$~', $sTagCommand)) {
                continue;
            }
    
            if (preg_match('~^\/?' . $this->_reg_obj_regexp . '$~', $sTagCommand)) {
                continue;
            }
    
            if(in_array($sTagCommand, $this->aComands)){
                switch ($sTagCommand) {
                    case 'include':
                        continue;
    
                    case 'include_php':
                        continue;
    
                    case 'if':
                        $this->_push_tag('if');
                        continue;
    
                    case 'else':
                        list($_open_tag) = end($this->_tag_stack);
                        if ($_open_tag != 'if' && $_open_tag != 'elseif')
                            return false;
                        else
                            $this->_push_tag('else');
                        continue;
    
                    case 'elseif':
                        list($_open_tag) = end($this->_tag_stack);
                        if ($_open_tag != 'if' && $_open_tag != 'elseif')
                            return false;
                        if ($_open_tag == 'if')
                            $this->_push_tag('elseif');
                        continue;
    
                    case '/if':
                        $bRez=$this->_pop_tag('if');
                        if($bRez===false) return $bRez;
                        continue;
    
                    case 'capture':
                        continue;
    
                    case '/capture':
                        continue;
    
                    case 'ldelim':
                        continue;
    
                    case 'rdelim':
                        continue;
    
                    case 'section':
                        $this->_push_tag('section');
                        continue;
    
                    case 'sectionelse':
                        $this->_push_tag('sectionelse');
                        continue;
                        break;
    
                    case '/section':
                        $bRez = $this->_pop_tag('section');
                        if($bRez===false) return $bRez;
                        continue;
    
                    case 'foreach':
                        $this->_push_tag('foreach');
                        continue;
                        break;
    
                    case 'foreachelse':
                        $this->_push_tag('foreachelse');
                        continue;
    
                    case '/foreach':
                        $bRez = $this->_pop_tag('foreach');
                        if($bRez===false) return $bRez;
                        continue;
    
                    case 'strip':
                    case '/strip':
                        if (substr($sTagCommand, 0, 1)=='/') {
                            $bRez=$this->_pop_tag('strip');
                            if($bRez===false) return $bRez;
                            continue;
                        } else {
                            $this->_push_tag('strip');
                            continue;
                        }
                        return '';
    
                    case 'php':
                        continue;
                        break;
    
                    case 'insert':
                        continue;
    
                    default:
                        return false;
    
                }
            }else{
                return false;
            }
        }
    
        if (count($this->_tag_stack)>0) {
            return false;
        }
    
        return true;
    }
    //-----------------------------------------------------------------------------------------------
    private function _push_tag($open_tag)
    {
        array_push($this->_tag_stack, array($open_tag));
    }
    //-----------------------------------------------------------------------------------------------
    private function _pop_tag($close_tag)
    {
        if (count($this->_tag_stack)>0) {
            list($_open_tag, $_line_no) = array_pop($this->_tag_stack);
            if ($close_tag == $_open_tag) {
                return $_open_tag;
            }
            if ($close_tag == 'if' && ($_open_tag == 'else' || $_open_tag == 'elseif' )) {
                return $this->_pop_tag($close_tag);
            }
            if ($close_tag == 'section' && $_open_tag == 'sectionelse') {
                $this->_pop_tag($close_tag);
                return $_open_tag;
            }
            if ($close_tag == 'foreach' && $_open_tag == 'foreachelse') {
                $this->_pop_tag($close_tag);
                return $_open_tag;
            }
            if ($_open_tag == 'else' || $_open_tag == 'elseif') {
                $_open_tag = 'if';
            } elseif ($_open_tag == 'sectionelse') {
                $_open_tag = 'section';
            } elseif ($_open_tag == 'foreachelse') {
                $_open_tag = 'foreach';
            }
        }else{
            return false;
        }
    }
    //-----------------------------------------------------------------------------------------------
    
}
